Kotlin——初级篇（一）：最详细的环境搭建

众所周知，Kotlin出来已经良久了。Kotlin有着众多优势，不管是用于Android开发中，还是Java开发，都能缩减很大的代码量，大大提高了工作效率。而小生本人也是才从忙碌的个工作中抽身出来，有点儿空闲的时间学习这新鲜的技术。无疑的是这是一股新鲜的血液，也是引领技术领略的潮流。


Kotlin——初级篇（二）：变量、常量、注释

在Kotlin中的变量、常量以及注释多多少少和Java语言是有着不同之处的。不管是变量、常量的定义方式，还是注释的使用。下面详细的介绍Kotlin中的变量、常量、注释的使用。以及和Java的对比。
    /**
     * 声明不可空变量（必须初始化）：
     * 关键字 变量名: 数据类型 == xxx
     * 关键字：var（普通） val（final）
     *
     * 声明可空变量（必须初始化）：
     * 关键字 变量名: 数据类型?  = null/xxx
     * 关键字：var（普通） val（final）
     *
     * 声明后期初始化变量(可以不初始化)
     * lateinit 键字 变量名: 数据类型/组件等
     * 使用关键字lateinit注意事项：
     * 必须是var声明的变量
     * 不能声明可空变量
     * 不能声明基本数据类型 Int Float Double等,String可以
     * 声明后，使用前必须赋值，否则会报UninitializedPropertyAccessException
     *
     * 声明延迟初始化变量
     * 关键字 变量名: 数据类型 by lazy {}
     * 使用关键字lazy注意事项：
     * 必须是val都很忙的变量
     * 不能用于类型判断
     * 且在变量的数据类型后用by连接
     *
     * 声明常量
     * const 关键字 变量名: 数据类型 == xxx
     * 使用const关键字注意事项：
     * 只能修饰val
     * 顶层
     * 在object修饰的类中声明
     * 伴生对象中声明
     *
     * 注释和JAVA一样
     *
     */

Kotlin——初级篇（三）：数据类型详解
     /**
      * 内置类型：
      * Byte（8位）
      * Short（16位）
      * Int（32位）
      * Long（64位）
      * Float（32位）
      * Double（64位）
      *
      * 进制数：
      * 二进制
      * 十进制
      * 十六进制
      * 不支持八进制
      *
      * 数字类型字面常量的下划线作用：
      * 分割数字进行分组，使数字常量更易读
      *
      * 装箱与拆箱
      * 只存在装箱，不存在拆箱
      *
      * 两个数值的比较
      * 数值是否相等==
      * 数值在内存中的地址是否相等===
      *
      * 转换
      * 显示转换
      * 较小的类型不会被隐式转换为更大的类型，于是系统提供了显示转换
      * toByte() toShort() toInt() toLong() toFloat() toDouble() toChat() toString()
      * 隐式转换
      * 是从上下文推断出来的，即算术运算则被重载为适当的转换
      *
      * 位运算符
      * 没有特殊的字符，只能命名为可以以中缀形式调用的函数
      * 仅适用于Int和Long
      * shl(bits)   有符号向左移 (类似Java的<<)
      * shr(bits)   有符号向右移 (类似Java的>>)
      * ushr(bits)  无符号向右移 (类似Java的>>>)
      * and(bits)  位运算符 and (同Java中的按位与)
      * or(bits)   位运算符 or (同Java中的按位或)
      * xor(bits)  位运算符 xor (同Java中的按位异或)
      * inv()      位运算符 按位取反 (同Java中的按位取反)
      *
      * 布尔类型（Boolean）
      * 关键字 名称： Boolean = xxx
      *
      * 逻辑操作符（与java相同）
      * ' || ' => 逻辑或（或者）
      * ' && ' => 逻辑与（并且）
      * ' ! ' => 逻辑非（取反）
      *
      * 字符型（Char）
      * char变量用''
      * 不能直视为数字，可以显示转换为数字，也可以转换为其他类型
      * 当变量为英文字母时，还支持大小写转换
      * 字符转义
      * \t => 表示制表符
      * \n => 表示换行符
      * \b => 表示退格键（键盘上的Back建）
      * \r => 表示键盘上的Enter键
      * \\ => 表示反斜杠
      * \' => 表示单引号
      * \" => 表示双引号
      * \$ => 表示美元符号，如果不转义在kotlin中就表示变量的引用了
      * 其他的任何字符请使用Unicode转义序列语法。例：'\uFF00'
      *
      * 字符串类型（String）
      * 其元素可以通过索引来操作 str[index] for循环
      * 字符串字面量
      * 包含或不包含转义字符的字符串，转义包括\t、\n等
      * 包含任意字符的字符串 由三重引号（""" .... """）表示
      * 也可以使用trimMargin()函数山竹前导空格
      * 默认使用符号(|)作为距前缀，当然也可以使用其他字符。例：右尖括号（>）、左尖括号（<）等
      *
      * 字符串模板
      * 使用字符串模板的符号为$,在$后面加上变量名或{}中的表达式
      *
      * 数组型（Array）
      * 数组由Array<T>表示
      * 创建数组的3个函数
      * arrayOf() 创建一个数组，参数是一个可变参数的对象
      * arrayOfNulls() 创建一个指定数据类型且可为空元素的给定元素个数的数组
      * 工厂函数（Array()） 使用一个工厂函数Array(),它使用数组大小和返回给定其索引的每个数组元素的初始值的函数
      * Array() => 第一个参数表示数组元素的个数，第二个参数则为使用其元素下标组成的表达式
      * 原始数组类型
      * ByteArray => 表示字节型数组
      * ShortArray => 表示短整型数组
      * IntArray => 表示整型数组
      * LongArray => 表示长整型数组
      * BooleanArray => 表示布尔型数组
      * CharArray => 表示字符型数组
      * FloatArray => 表示浮点型数组
      * DoubleArray => 表示双精度浮点型数组
      * 不支持字符串类型的原始数组类型
      *
      */

Kotlin——初级篇（四）：控制语句详解
/**
     * if语句
     * 比在java中更灵活，除了能实现java写法外，还可以实现表达式（实现三元运算符），及作为一个块的运用
     * 传统写法（与java写法一样）
     * 三元运算符
     * 其实不存在，那是因为if语句的特性（if表达式会返回一个值）故而不需要三元运算符
     * Kotlin中的if可以作为一个表达式并返回一个值
     * 作为一个块结构，并且左后一句表达式为块的值
     *
     * for语句
     * 废除了java中的for（初始值;条件;增减步长）这个规则，新增了规则
     *
     * 新增规则：
     * 去满足for（初始值;条件;增减步长）
     * 递增
     * 关键字until
     * 范围 until[n,m},即大于等于n，小于m
     *
     * 递减
     * 关键字downTo
     * 范围 downTo[n,m],即小于等于n，大于等于m
     *
     * 符号.. 表示递增的循环的另一种操作
     * 使用符号..
     * 范围 ..[n,m],即大于等于n，小于等于m，和until的区别是，简便性，范围不同
     *
     * 设置步长
     * 关键字 step
     *
     * 迭代
     * for循环提供迭代器用来遍历任何东西
     * for循环数组呗编译为一个基于索引的循环，不会创建一个迭代器对象
     *
     * 遍历字符串
     * 遍历数组
     * 使用数组的indices遍历
     * 使用数组的withIndex()方法遍历
     * 使用列表或数组的扩展函数遍历
     * 数组或列表有一个成员或扩展函数iterator实现了Iterator<T>接口，且该接口提供了next()和hasNext()两个成员或扩展函数
     * 和一般的while循环一起用
     *
     * when语句
     * 废除了java中的switch语句，新增了when(exp){}语句
     * when语句不仅可以替代switch语句，而且比switch语句更强大
     *
     * when语句实现switch语句功能
     * 和逗号结合使用，相当于switch语句中的不使用break跳转语句
     * 条件可以使用任意表达式，不仅局限于常量，相当于if表达式的用法
     *
     * 检查值是否存在于集合或数组中
     * 操作符 in 在
     * 操作符 !in 不在
     * 只适用于数值类型
     *
     * 检查值是否为指定类型的值
     * 操作符 is 是
     * 操作符 !is 不是
     * kotlin的智能转换可以访问类型的方法和属性
     *
     * 不使用表达式的when语句
     * 表示为最简单的布尔表达式
     *
     * while语句（与java相同）
     * while(exp){ 其中exp为表达式
     * ...
     * }
     * do...while语句（与java相同）
     * do(exp){ // 其中exp为表达式
     * ...
     * }(while)
     * 跳转语句（return、break、continue）（与java相同）
     *
     */

